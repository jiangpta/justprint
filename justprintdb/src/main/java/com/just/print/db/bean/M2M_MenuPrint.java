package com.just.print.db.bean;

import com.just.print.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.just.print.db.dao.M2M_MenuPrintDao;
import com.just.print.db.dao.MenuDao;
import com.just.print.db.dao.PrinterDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table M2_M__MENU_PRINT.
 */
public class M2M_MenuPrint {

    private Long pid;
    private String mid;
    private Long id;
    private Integer state;
    private Long version;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient M2M_MenuPrintDao myDao;

    private Printer print;
    private Long print__resolvedKey;

    private Menu menu;
    private String menu__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public M2M_MenuPrint() {
    }

    public M2M_MenuPrint(Long id) {
        this.id = id;
    }

    public M2M_MenuPrint(Long pid, String mid, Long id, Integer state, Long version) {
        this.pid = pid;
        this.mid = mid;
        this.id = id;
        this.state = state;
        this.version = version;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getM2M_MenuPrintDao() : null;
    }

    public Long getPid() {
        return pid;
    }

    public void setPid(Long pid) {
        this.pid = pid;
    }

    public String getMid() {
        return mid;
    }

    public void setMid(String mid) {
        this.mid = mid;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    /** To-one relationship, resolved on first access. */
    public Printer getPrint() {
        Long __key = this.pid;
        if (print__resolvedKey == null || !print__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PrinterDao targetDao = daoSession.getPrinterDao();
            Printer printNew = targetDao.load(__key);
            synchronized (this) {
                print = printNew;
            	print__resolvedKey = __key;
            }
        }
        return print;
    }

    public void setPrint(Printer print) {
        synchronized (this) {
            this.print = print;
            pid = print == null ? null : print.getId();
            print__resolvedKey = pid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Menu getMenu() {
        String __key = this.mid;
        if (menu__resolvedKey == null || menu__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MenuDao targetDao = daoSession.getMenuDao();
            Menu menuNew = targetDao.load(__key);
            synchronized (this) {
                menu = menuNew;
            	menu__resolvedKey = __key;
            }
        }
        return menu;
    }

    public void setMenu(Menu menu) {
        synchronized (this) {
            this.menu = menu;
            mid = menu == null ? null : menu.getID();
            menu__resolvedKey = mid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
