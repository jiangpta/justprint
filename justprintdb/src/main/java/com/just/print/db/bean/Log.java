package com.just.print.db.bean;

import com.just.print.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.just.print.db.dao.LogDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table Logs.
 */
public class Log {

    private Long id;
    private String msg;
    private String uName;
    private java.util.Date date;
    private Integer logType;
    private Integer state;
    private Long version;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LogDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Log() {
    }

    public Log(Long id) {
        this.id = id;
    }

    public Log(Long id, String msg, String uName, java.util.Date date, Integer logType, Integer state, Long version) {
        this.id = id;
        this.msg = msg;
        this.uName = uName;
        this.date = date;
        this.logType = logType;
        this.state = state;
        this.version = version;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLogDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public String getUName() {
        return uName;
    }

    public void setUName(String uName) {
        this.uName = uName;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Integer getLogType() {
        return logType;
    }

    public void setLogType(Integer logType) {
        this.logType = logType;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void updateAndUpgrade() {
        version = com.just.print.db.expand.DaoExpand.queryMaxVersion(myDao);
        update();
    }
    public void logicDelete() {
        state = com.just.print.db.expand.State.delete;
        updateAndUpgrade();
    }
    // KEEP METHODS END

}
