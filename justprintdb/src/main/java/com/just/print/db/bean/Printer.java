package com.just.print.db.bean;

import com.just.print.db.dao.DaoSession;
import com.just.print.db.dao.PrinterDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table PRINTER.
 */
public class Printer {

    private Long id;
    private String ip;
    private String pname;
    private String note;
    private Integer firstPrint;
    private Integer type;
    private Integer state;
    private Long version;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient PrinterDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Printer() {
    }

    public Printer(Long id) {
        this.id = id;
    }

    public Printer(Long id, String ip, String pname, String note, Integer firstPrint, Integer type, Integer state, Long version) {
        this.id = id;
        this.ip = ip;
        this.pname = pname;
        this.note = note;
        this.firstPrint = firstPrint;
        this.type = type;
        this.state = state;
        this.version = version;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPrinterDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    public String getPname() {
        return pname;
    }

    public void setPname(String pname) {
        this.pname = pname;
    }

    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public Integer getFirstPrint() {
        return firstPrint;
    }

    public void setFirstPrint(Integer firstPrint) {
        this.firstPrint = firstPrint;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void updateAndUpgrade() {
        version = com.just.print.db.expand.DaoExpand.queryMaxVersion(myDao);
        update();
    }

    public void logicDelete() {
        state = com.just.print.db.expand.State.delete;
        updateAndUpgrade();
    }

    @Override
    public boolean equals(Object o) {
        if (o instanceof Printer) {
            return ((Printer) o).getId() == getId();
        } else return false;
    }
// KEEP METHODS END

}
