package com.just.print.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.just.print.db.bean.Menu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MENU.
*/
public class MenuDao extends AbstractDao<Menu, String> {

    public static final String TABLENAME = "MENU";

    /**
     * Properties of entity Menu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mname = new Property(0, String.class, "mname", false, "M_NAME");
        public final static Property ID = new Property(1, String.class, "ID", true, "ID");
        public final static Property Price = new Property(2, Double.class, "price", false, "PRICE");
        public final static Property Cid = new Property(3, Long.class, "cid", false, "C_ID");
        public final static Property State = new Property(4, Integer.class, "state", false, "STATE");
        public final static Property Version = new Property(5, Long.class, "version", false, "VERSION");
    };

    private DaoSession daoSession;

    private Query<Menu> category_MenuListQuery;

    public MenuDao(DaoConfig config) {
        super(config);
    }
    
    public MenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MENU' (" + //
                "'M_NAME' TEXT," + // 0: mname
                "'ID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 1: ID
                "'PRICE' REAL," + // 2: price
                "'C_ID' INTEGER," + // 3: cid
                "'STATE' INTEGER," + // 4: state
                "'VERSION' INTEGER);"); // 5: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MENU'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Menu entity) {
        stmt.clearBindings();
 
        String mname = entity.getMname();
        if (mname != null) {
            stmt.bindString(1, mname);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(3, price);
        }
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(4, cid);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(5, state);
        }
 
        Long version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(6, version);
        }
    }

    @Override
    protected void attachEntity(Menu entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Menu readEntity(Cursor cursor, int offset) {
        Menu entity = new Menu( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // state
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // version
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Menu entity, int offset) {
        entity.setMname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setCid(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setState(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Menu entity, long rowId) {
        return entity.getID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Menu entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "menuList" to-many relationship of Category. */
    public List<Menu> _queryCategory_MenuList(Long cid) {
        synchronized (this) {
            if (category_MenuListQuery == null) {
                QueryBuilder<Menu> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cid.eq(null));
                category_MenuListQuery = queryBuilder.build();
            }
        }
        Query<Menu> query = category_MenuListQuery.forCurrentThread();
        query.setParameter(0, cid);
        return query.list();
    }

}
