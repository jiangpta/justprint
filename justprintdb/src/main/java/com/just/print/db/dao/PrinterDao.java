package com.just.print.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.just.print.db.bean.Printer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRINTER.
*/
public class PrinterDao extends AbstractDao<Printer, Long> {

    public static final String TABLENAME = "PRINTER";

    /**
     * Properties of entity Printer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ip = new Property(1, String.class, "ip", false, "IP");
        public final static Property Pname = new Property(2, String.class, "pname", false, "P_NAME");
        public final static Property Note = new Property(3, String.class, "note", false, "NOTE");
        public final static Property FirstPrint = new Property(4, Integer.class, "firstPrint", false, "FIRST_PRINT");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property State = new Property(6, Integer.class, "state", false, "STATE");
        public final static Property Version = new Property(7, Long.class, "version", false, "VERSION");
    };

    private DaoSession daoSession;


    public PrinterDao(DaoConfig config) {
        super(config);
    }
    
    public PrinterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRINTER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IP' TEXT," + // 1: ip
                "'P_NAME' TEXT," + // 2: pname
                "'NOTE' TEXT," + // 3: note
                "'FIRST_PRINT' INTEGER," + // 4: firstPrint
                "'TYPE' INTEGER," + // 5: type
                "'STATE' INTEGER," + // 6: state
                "'VERSION' INTEGER);"); // 7: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRINTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Printer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(2, ip);
        }
 
        String pname = entity.getPname();
        if (pname != null) {
            stmt.bindString(3, pname);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        Integer firstPrint = entity.getFirstPrint();
        if (firstPrint != null) {
            stmt.bindLong(5, firstPrint);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(7, state);
        }
 
        Long version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(8, version);
        }
    }

    @Override
    protected void attachEntity(Printer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Printer readEntity(Cursor cursor, int offset) {
        Printer entity = new Printer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ip
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // note
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // firstPrint
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // state
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // version
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Printer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstPrint(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setVersion(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Printer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Printer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
