package com.just.print.db.bean;

import java.util.List;
import com.just.print.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.just.print.db.dao.M2M_MenuPrintDao;
import com.just.print.db.dao.MenuDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MENU.
 */
public class Menu {

    private String mname;
    private String ID;
    private Double price;
    private Long cid;
    private Integer state;
    private Long version;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MenuDao myDao;

    private List<M2M_MenuPrint> m2M_MenuPrintList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Menu() {
    }

    public Menu(String ID) {
        this.ID = ID;
    }

    public Menu(String mname, String ID, Double price, Long cid, Integer state, Long version) {
        this.mname = mname;
        this.ID = ID;
        this.price = price;
        this.cid = cid;
        this.state = state;
        this.version = version;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMenuDao() : null;
    }

    public String getMname() {
        return mname;
    }

    public void setMname(String mname) {
        this.mname = mname;
    }

    public String getID() {
        return ID;
    }

    public void setID(String ID) {
        this.ID = ID;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Long getCid() {
        return cid;
    }

    public void setCid(Long cid) {
        this.cid = cid;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<M2M_MenuPrint> getM2M_MenuPrintList() {
        if (m2M_MenuPrintList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            M2M_MenuPrintDao targetDao = daoSession.getM2M_MenuPrintDao();
            List<M2M_MenuPrint> m2M_MenuPrintListNew = targetDao._queryMenu_M2M_MenuPrintList(ID);
            synchronized (this) {
                if(m2M_MenuPrintList == null) {
                    m2M_MenuPrintList = m2M_MenuPrintListNew;
                }
            }
        }
        return m2M_MenuPrintList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetM2M_MenuPrintList() {
        m2M_MenuPrintList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void updateAndUpgrade() {
        version = com.just.print.db.expand.DaoExpand.queryMaxVersion(myDao);
        update();
    }

    public void logicDelete() {
        state = com.just.print.db.expand.State.delete;
        updateAndUpgrade();
    }
    // KEEP METHODS END

}
